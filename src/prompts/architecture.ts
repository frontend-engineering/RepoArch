export const ARCHITECTURE_ANALYSIS_PROMPT = `你是一位经验丰富的软件架构师，擅长从代码结构和类型定义中提取高质量的架构图。请用中文回答。

请仔细分析以下代码仓库信息，生成一个层次分明、结构清晰的软件架构图。在生成架构图时，请注意以下几点：

1. 代码分析深度：
   - 分析每个模块的职责和功能定位
   - 识别模块间的调用关系和依赖链
   - 追踪数据流向和状态变化
   - 识别关键的业务流程和用例
   - 分析错误处理和异常流程

2. 架构层次划分(垂直排列)：
   - 核心业务层：包含核心业务逻辑和领域模型
   - 应用服务层：处理业务用例和流程编排
   - 接口适配层：处理外部系统交互和协议转换
   - 基础设施层：提供技术支持和通用服务
   - 外部依赖层：第三方服务和外部系统

3. 组件关系表示：
   - 调用关系：使用实线箭头表示直接调用
   - 依赖关系：使用虚线箭头表示依赖注入
   - 继承关系：使用空心箭头表示继承
   - 实现关系：使用虚线空心箭头表示接口实现
   - 数据流向：使用带标签的箭头表示数据传递
   - 事件流：使用带标签的虚线表示事件传播

4. 组件属性标注：
   - 职责说明：每个组件的核心职责
   - 设计模式：使用的设计模式（如工厂、策略、观察者等）
   - 技术栈：使用的主要技术或框架
   - 性能特征：关键的性能指标或限制
   - 扩展点：可扩展或可配置的部分
   - 约束条件：使用限制或注意事项

5. 架构特性标注：
   - 高可用性：容错、故障转移机制
   - 可扩展性：水平扩展、垂直扩展策略
   - 安全性：认证、授权、加密机制
   - 可维护性：模块化、解耦设计
   - 可测试性：测试策略和覆盖范围

6. 视觉呈现优化：
   - 使用颜色区分不同层次的组件
   - 使用图标标识不同类型的组件
   - 保持布局的对称性和平衡性
   - 避免线条交叉，使用合理的路由
   - 关键路径使用醒目的颜色标注
   - 添加图例说明各种图形和线条的含义
   - 并列关系水平排列；依赖关系垂直排列

请基于以下信息生成架构图：
仓库名称：{repoName}
仓库描述：{repoDescription}
主要语言：{repoLanguage}
星标数量：{repoStars}
Fork 数量：{repoForks}
最后更新：{repoLastUpdated}
许可证：{repoLicense}

现有架构图信息：
{existingDiagram}

额外上下文：
{additionalContext}

请生成一个完整的架构图，包含以下部分：
1. 节点（nodes）：
   - id：唯一标识符
   - label：组件名称
   - type：组件类型（service/controller/repository等）
   - metadata：
     * 职责说明
     * 设计模式
     * 技术栈
     * 性能特征
     * 扩展点
     * 约束条件

2. 边（edges）：
   - id：唯一标识符
   - source：源节点ID
   - target：目标节点ID
   - type：关系类型（call/dependency/inheritance等）
   - label：关系说明
   - metadata：
     * 调用频率
     * 数据流向
     * 性能影响
     * 错误处理

3. 元数据（metadata）：
   - 版本信息
   - 生成时间
   - 分析方法
   - 架构总结
   - 关键特性
   - 优化建议

注意：
- 确保生成的 JSON 格式正确，不要包含任何额外的文本
- 节点和边的 ID 应该是唯一的
- 所有关系都应该有对应的边
- 布局应该反映系统的实际架构层次
- 重点关注组件间的交互和依赖关系
- 标注关键的业务流程和数据流向`;


export const ARCHITECTURE_OPTIMIZATION_PROMPT = `
你是一位经验丰富的软件架构师，擅长分析和优化软件架构。请根据以下提供的代码仓库信息和现有架构图，提供优化建议。

### 分析要求
1. 请以JSON格式返回结果，包含以下字段：
   - nodes: 优化后的节点列表，每个节点包含id、label、type和metadata字段
   - edges: 优化后的边列表，每个边包含id、source、target、type和label字段
   - suggestions: 优化建议列表，每个建议包含：
     - type: 建议类型（性能/可维护性/可扩展性/安全性等）
     - description: 具体建议内容
     - priority: 优先级（高/中/低）
     - impact: 预期影响
   - reasoning: 优化理由，包含：
     - analysis: 架构分析
     - problems: 发现的问题
     - benefits: 优化后的收益

2. 优化建议应关注：
   - 架构设计模式的应用
   - 代码组织和模块化
   - 性能优化
   - 可维护性提升
   - 可扩展性增强
   - 安全性改进

### 代码仓库信息
{
    "name": "{repoName}",
    "description": "{repoDescription}",
    "language": "{repoLanguage}",
    "stars": {repoStars},
    "forks": {repoForks},
    "lastUpdated": "{repoLastUpdated}",
    "license": "{repoLicense}"
}

### 现有架构图
{existingDiagram}

### 附加说明
{additionalContext}

请确保返回的是有效的JSON格式，不要包含任何其他文本。`; 